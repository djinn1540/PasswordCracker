Password Cracker Design Document
Marcus Daly mrd109
Jamie Flynn gjf20

Files:

	-init.c: c program to encrypt a custom message with a preset key and initialization vector.  The encrypted text is output to cipher.txt
	-cipher.txt: holds the encrypted text that brute_force.c will decrypt
	-brute_force.c: takes cipher.txt as input and tries all keys in keyspace for decrypting the ciphertext in cipher.txt.  We use concurrent programming to accomplish this in a timely manner. The resulting messages from each key-try are sorted based on how closely they resemble english; they are then output to the output.txt file.
	-words.txt: Dictionary of english words and some others, from github.com/dwyl/english-words


Major Data Structures:

	-probableMessage: a struct that pairs a probability(double) with a message(character array)
	-array of probableMessage: an array of our custom struct that we sort in the "sorting" function.

Sample Output:
	the output will be a sorted list of potential messages, with the most english-like at the top.

hello john 1 a beef
hwd grace food empanada 0x34
?? lollipop mahogany fo4l2w
l3g1t 7un35 4 u dawg

Project Breakdown:
Marcus Daly:
	-countProbEnglWords
	-search
	-sorting
	-comparator

Jamie Flynn:
	-init.c
	-decrypt
	-main in brute_force.c
