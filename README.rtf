{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Password Cracker Readme\
\
Gregory Flynn gjf20, Marcus Daly\
\
The password cracker is for educational purposes only.  The password cracker \
\
To encrypt a message, we used init.c (through the openssl library) to encrypt a desired message and save it in cipher.txt.\
1) run init, entering the desired message to be encrypted as a argument, the cipher text will be output to cipher.txt\
2) run the brute_force program on an HPCC, ensuring that cipher.txt is in the local directory\
3) look at output.txt to see the potential messages, they are ranked by how much of the text is english\
\
Unfortunately, the final judgement as to what is the true decrypted text must be made by the user.  However, it is likely the user knows what they are looking for, and there should not be nearly as many options to sort through.\
}