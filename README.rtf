{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13160\viewh12140\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Password Cracker Readme\
\
Gregory Flynn gjf20, Marcus Daly mrd109\
\
The password cracker is for educational purposes only.\
\
To encrypt a message,\
1) place the message to be encrypted into input.txt (or in a file of your choosing - just use that filename where you see input.txt in the following step).\
2) run encrypt, entering input.txt as a argument, the cipher text will be output to encrypted_file\
\
Optionally: You may change which number key is used to encrypt by changing USEKEY (default 1) in encrypt.c to any number < KEYSPACESIZE (default 1000, located in decrypt.c)\
\
To decrypt a message,\
1) run decrypt on a multicore OS, ensuring that encrypted_file is in the local directory\
2) look at probable_decryptions to see the potential messages, they are ranked by percentage of \'93words\'94 in the text that are in words.txt\
\
Optionally: You may change the value of KEYSPACESIZE(default 1000) to increase the number of key tries\
\
Unfortunately, the final judgement as to what is the true decrypted text must be made by the user.  However, it is likely the user knows what they are looking for, and there should not be nearly as many options to sort through.\
\
\
}